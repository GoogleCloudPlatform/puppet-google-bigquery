# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'spec_helper'

describe Puppet::Type.type(:gbigquery_table).provider(:google) do
  before(:all) do
    cred = Google::FakeAuthorization.new
    Puppet::Type.type(:gauth_credential)
                .define_singleton_method(:fetch) { |_resource| cred }
  end

  it '#instances' do
    expect { described_class.instances }.to raise_error(StandardError,
                                                        /not supported/)
  end

  context 'ensure == present' do
    context 'resource exists' do
      # Ensure present: resource exists, no change
      context 'no changes == no action' do
        # Ensure present: resource exists, no change, no name
        context 'title == name' do
          # Ensure present: resource exists, no change, no name, pass
          context 'title == name (pass)' do
            before do
              allow(Time).to receive(:now).and_return(
                Time.new(2017, 1, 2, 3, 4, 5)
              )
              expect_network_get_success 1, name: 'title0'
              expect_network_get_success 2, name: 'title1'
              expect_network_get_success 3, name: 'title2'
            end

            let(:catalog) do
              apply_with_error_check(
                <<-MANIFEST
                gbigquery_table { 'title0':
                  ensure                      => present,
                  dataset                     => 'test dataset#0 data',
                  description                 => 'test description#0 data',
                  encryption_configuration    => {
                    kms_key_name => 'test kms_key_name#0 data',
                  },
                  expiration_time             => 1531015816,
                  external_data_configuration => {
                    autodetect            => true,
                    bigtable_options      => {
                      column_families                    => [
                        {
                          columns          => [
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#0 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#0 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#1 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#1 data',
                              type             => 'STRING',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#2 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#2 data',
                              type             => 'INTEGER',
                            },
                          ],
                          encoding         => 'TEXT',
                          family_id        => 'test family_id#0 data',
                          only_read_latest => true,
                          type             => 'BYTES',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#1 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#1 data',
                              type             => 'STRING',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#2 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#2 data',
                              type             => 'INTEGER',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                          ],
                          encoding         => 'BINARY',
                          family_id        => 'test family_id#1 data',
                          only_read_latest => false,
                          type             => 'STRING',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#2 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#2 data',
                              type             => 'INTEGER',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#5 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#5 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#6 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#6 data',
                              type             => 'STRING',
                            },
                          ],
                          encoding         => 'TEXT',
                          family_id        => 'test family_id#2 data',
                          only_read_latest => true,
                          type             => 'INTEGER',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                          ],
                          encoding         => 'BINARY',
                          family_id        => 'test family_id#3 data',
                          only_read_latest => false,
                          type             => 'FLOAT',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#5 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#5 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#6 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#6 data',
                              type             => 'STRING',
                            },
                          ],
                          encoding         => 'TEXT',
                          family_id        => 'test family_id#4 data',
                          only_read_latest => true,
                          type             => 'BOOLEAN',
                        },
                      ],
                      ignore_unspecified_column_families => true,
                      read_rowkey_as_string              => true,
                    },
                    compression           => 'GZIP',
                    csv_options           => {
                      allow_jagged_rows     => true,
                      allow_quoted_newlines => true,
                      encoding              => 'UTF-8',
                      field_delimiter       => 'test field_delimiter#0 data',
                      quote                 => 'test quote#0 data',
                      skip_leading_rows     => 0,
                    },
                    google_sheets_options => {
                      skip_leading_rows => 0,
                    },
                    ignore_unknown_values => true,
                    max_bad_records       => 0,
                    schema                => {
                      fields => [
                        {
                          description => 'test description#0 data',
                          fields      => ['tt', 'uu', 'vv'],
                          mode        => 'NULLABLE',
                          name        => 'test name#0 data',
                          type        => 'STRING',
                        },
                        {
                          description => 'test description#1 data',
                          fields      => ['oo', 'pp', 'qq', 'rr'],
                          mode        => 'REQUIRED',
                          name        => 'test name#1 data',
                          type        => 'BYTES',
                        },
                        {
                          description => 'test description#2 data',
                          fields      => ['kk', 'll'],
                          mode        => 'REPEATED',
                          name        => 'test name#2 data',
                          type        => 'INTEGER',
                        },
                      ],
                    },
                    source_format         => 'CSV',
                    source_uris           => ['bb', 'cc', 'dd'],
                  },
                  friendly_name               => 'test friendly_name#0 data',
                  labels                      => {
                    'test labels#1 data' => 'test labels#1 data',
                    'test labels#2 data' => 6131251034,
                  },
                  schema                      => {
                    fields => [
                      {
                        description => 'test description#0 data',
                        fields      => ['tt', 'uu', 'vv'],
                        mode        => 'NULLABLE',
                        name        => 'test name#0 data',
                        type        => 'STRING',
                      },
                      {
                        description => 'test description#1 data',
                        fields      => ['oo', 'pp', 'qq', 'rr'],
                        mode        => 'REQUIRED',
                        name        => 'test name#1 data',
                        type        => 'BYTES',
                      },
                      {
                        description => 'test description#2 data',
                        fields      => ['kk', 'll'],
                        mode        => 'REPEATED',
                        name        => 'test name#2 data',
                        type        => 'INTEGER',
                      },
                    ],
                  },
                  table_reference             => {
                    dataset_id => 'test dataset_id#0 data',
                    table_id   => 'test table_id#0 data',
                    projectid  => 'test projectid#0 data',
                  },
                  time_partitioning           => {
                    expiration_ms => 2560001735,
                    type          => 'DAY',
                  },
                  view                        => {
                    use_legacy_sql                  => true,
                    user_defined_function_resources => [
                      {
                        inline_code  => 'test inline_code#0 data',
                        resource_uri => 'test resource_uri#0 data',
                      },
                      {
                        inline_code  => 'test inline_code#1 data',
                        resource_uri => 'test resource_uri#1 data',
                      },
                      {
                        inline_code  => 'test inline_code#2 data',
                        resource_uri => 'test resource_uri#2 data',
                      },
                      {
                        inline_code  => 'test inline_code#3 data',
                        resource_uri => 'test resource_uri#3 data',
                      },
                    ],
                  },
                  project                     => 'test project#0 data',
                  credential                  => 'cred0',
                }

                gbigquery_table { 'title1':
                  ensure                      => present,
                  dataset                     => 'test dataset#1 data',
                  description                 => 'test description#1 data',
                  encryption_configuration    => {
                    kms_key_name => 'test kms_key_name#1 data',
                  },
                  expiration_time             => 3062031632,
                  external_data_configuration => {
                    autodetect            => false,
                    bigtable_options      => {
                      column_families                    => [
                        {
                          columns          => [
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#1 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#1 data',
                              type             => 'STRING',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#2 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#2 data',
                              type             => 'INTEGER',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                          ],
                          encoding         => 'BINARY',
                          family_id        => 'test family_id#1 data',
                          only_read_latest => false,
                          type             => 'STRING',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#2 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#2 data',
                              type             => 'INTEGER',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#5 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#5 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#6 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#6 data',
                              type             => 'STRING',
                            },
                          ],
                          encoding         => 'TEXT',
                          family_id        => 'test family_id#2 data',
                          only_read_latest => true,
                          type             => 'INTEGER',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                          ],
                          encoding         => 'BINARY',
                          family_id        => 'test family_id#3 data',
                          only_read_latest => false,
                          type             => 'FLOAT',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#5 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#5 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#6 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#6 data',
                              type             => 'STRING',
                            },
                          ],
                          encoding         => 'TEXT',
                          family_id        => 'test family_id#4 data',
                          only_read_latest => true,
                          type             => 'BOOLEAN',
                        },
                      ],
                      ignore_unspecified_column_families => false,
                      read_rowkey_as_string              => false,
                    },
                    compression           => 'NONE',
                    csv_options           => {
                      allow_jagged_rows     => false,
                      allow_quoted_newlines => false,
                      encoding              => 'ISO-8859-1',
                      field_delimiter       => 'test field_delimiter#1 data',
                      quote                 => 'test quote#1 data',
                      skip_leading_rows     => 0,
                    },
                    google_sheets_options => {
                      skip_leading_rows => 0,
                    },
                    ignore_unknown_values => false,
                    max_bad_records       => 0,
                    schema                => {
                      fields => [
                        {
                          description => 'test description#1 data',
                          fields      => ['oo', 'pp', 'qq', 'rr'],
                          mode        => 'REQUIRED',
                          name        => 'test name#1 data',
                          type        => 'BYTES',
                        },
                        {
                          description => 'test description#2 data',
                          fields      => ['kk', 'll'],
                          mode        => 'REPEATED',
                          name        => 'test name#2 data',
                          type        => 'INTEGER',
                        },
                        {
                          description => 'test description#3 data',
                          fields      => ['ff', 'gg', 'hh'],
                          mode        => 'NULLABLE',
                          name        => 'test name#3 data',
                          type        => 'FLOAT',
                        },
                        {
                          description => 'test description#4 data',
                          fields      => ['ww', 'xx', 'yy', 'zz'],
                          mode        => 'REQUIRED',
                          name        => 'test name#4 data',
                          type        => 'TIMESTAMP',
                        },
                      ],
                    },
                    source_format         => 'GOOGLE_SHEETS',
                    source_uris           => ['ff', 'gg', 'hh', 'ii', 'jj'],
                  },
                  friendly_name               => 'test friendly_name#1 data',
                  labels                      => {
                    'test labels#2 data' => 'test labels#2 data',
                    'test labels#3 data' => 8175001379,
                    'test labels#4 data' => 'test labels#4 data',
                  },
                  schema                      => {
                    fields => [
                      {
                        description => 'test description#1 data',
                        fields      => ['oo', 'pp', 'qq', 'rr'],
                        mode        => 'REQUIRED',
                        name        => 'test name#1 data',
                        type        => 'BYTES',
                      },
                      {
                        description => 'test description#2 data',
                        fields      => ['kk', 'll'],
                        mode        => 'REPEATED',
                        name        => 'test name#2 data',
                        type        => 'INTEGER',
                      },
                      {
                        description => 'test description#3 data',
                        fields      => ['ff', 'gg', 'hh'],
                        mode        => 'NULLABLE',
                        name        => 'test name#3 data',
                        type        => 'FLOAT',
                      },
                      {
                        description => 'test description#4 data',
                        fields      => ['ww', 'xx', 'yy', 'zz'],
                        mode        => 'REQUIRED',
                        name        => 'test name#4 data',
                        type        => 'TIMESTAMP',
                      },
                    ],
                  },
                  table_reference             => {
                    dataset_id => 'test dataset_id#1 data',
                    table_id   => 'test table_id#1 data',
                    projectid  => 'test projectid#1 data',
                  },
                  time_partitioning           => {
                    expiration_ms => 5120003470,
                    type          => 'DAY',
                  },
                  view                        => {
                    use_legacy_sql                  => false,
                    user_defined_function_resources => [
                      {
                        inline_code  => 'test inline_code#1 data',
                        resource_uri => 'test resource_uri#1 data',
                      },
                      {
                        inline_code  => 'test inline_code#2 data',
                        resource_uri => 'test resource_uri#2 data',
                      },
                    ],
                  },
                  project                     => 'test project#1 data',
                  credential                  => 'cred1',
                }

                gbigquery_table { 'title2':
                  ensure                      => present,
                  dataset                     => 'test dataset#2 data',
                  description                 => 'test description#2 data',
                  encryption_configuration    => {
                    kms_key_name => 'test kms_key_name#2 data',
                  },
                  expiration_time             => 4593047448,
                  external_data_configuration => {
                    autodetect            => true,
                    bigtable_options      => {
                      column_families                    => [
                        {
                          columns          => [
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#2 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#2 data',
                              type             => 'INTEGER',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#5 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#5 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#6 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#6 data',
                              type             => 'STRING',
                            },
                          ],
                          encoding         => 'TEXT',
                          family_id        => 'test family_id#2 data',
                          only_read_latest => true,
                          type             => 'INTEGER',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                          ],
                          encoding         => 'BINARY',
                          family_id        => 'test family_id#3 data',
                          only_read_latest => false,
                          type             => 'FLOAT',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#5 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#5 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#6 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#6 data',
                              type             => 'STRING',
                            },
                          ],
                          encoding         => 'TEXT',
                          family_id        => 'test family_id#4 data',
                          only_read_latest => true,
                          type             => 'BOOLEAN',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#5 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#5 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#6 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#6 data',
                              type             => 'STRING',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#7 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#7 data',
                              type             => 'INTEGER',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#8 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#8 data',
                              type             => 'FLOAT',
                            },
                          ],
                          encoding         => 'BINARY',
                          family_id        => 'test family_id#5 data',
                          only_read_latest => false,
                          type             => 'BYTES',
                        },
                      ],
                      ignore_unspecified_column_families => true,
                      read_rowkey_as_string              => true,
                    },
                    compression           => 'GZIP',
                    csv_options           => {
                      allow_jagged_rows     => true,
                      allow_quoted_newlines => true,
                      encoding              => 'UTF-8',
                      field_delimiter       => 'test field_delimiter#2 data',
                      quote                 => 'test quote#2 data',
                      skip_leading_rows     => 0,
                    },
                    google_sheets_options => {
                      skip_leading_rows => 0,
                    },
                    ignore_unknown_values => true,
                    max_bad_records       => 0,
                    schema                => {
                      fields => [
                        {
                          description => 'test description#2 data',
                          fields      => ['kk', 'll'],
                          mode        => 'REPEATED',
                          name        => 'test name#2 data',
                          type        => 'INTEGER',
                        },
                        {
                          description => 'test description#3 data',
                          fields      => ['ff', 'gg', 'hh'],
                          mode        => 'NULLABLE',
                          name        => 'test name#3 data',
                          type        => 'FLOAT',
                        },
                      ],
                    },
                    source_format         => 'NEWLINE_DELIMITED_JSON',
                    source_uris           => ['jj', 'kk', 'll'],
                  },
                  friendly_name               => 'test friendly_name#2 data',
                  labels                      => {
                    'test labels#3 data' => 'test labels#3 data',
                    'test labels#4 data' => 10218751724,
                    'test labels#5 data' => 'test labels#5 data',
                    'test labels#6 data' => 14306252413,
                  },
                  schema                      => {
                    fields => [
                      {
                        description => 'test description#2 data',
                        fields      => ['kk', 'll'],
                        mode        => 'REPEATED',
                        name        => 'test name#2 data',
                        type        => 'INTEGER',
                      },
                      {
                        description => 'test description#3 data',
                        fields      => ['ff', 'gg', 'hh'],
                        mode        => 'NULLABLE',
                        name        => 'test name#3 data',
                        type        => 'FLOAT',
                      },
                    ],
                  },
                  table_reference             => {
                    dataset_id => 'test dataset_id#2 data',
                    table_id   => 'test table_id#2 data',
                    projectid  => 'test projectid#2 data',
                  },
                  time_partitioning           => {
                    expiration_ms => 7680005205,
                    type          => 'DAY',
                  },
                  view                        => {
                    use_legacy_sql                  => true,
                    user_defined_function_resources => [
                      {
                        inline_code  => 'test inline_code#2 data',
                        resource_uri => 'test resource_uri#2 data',
                      },
                      {
                        inline_code  => 'test inline_code#3 data',
                        resource_uri => 'test resource_uri#3 data',
                      },
                      {
                        inline_code  => 'test inline_code#4 data',
                        resource_uri => 'test resource_uri#4 data',
                      },
                      {
                        inline_code  => 'test inline_code#5 data',
                        resource_uri => 'test resource_uri#5 data',
                      },
                      {
                        inline_code  => 'test inline_code#6 data',
                        resource_uri => 'test resource_uri#6 data',
                      },
                    ],
                  },
                  project                     => 'test project#2 data',
                  credential                  => 'cred2',
                }
                MANIFEST
              ).catalog
            end

            context 'Gbigquery_table[title0]' do
              subject do
                catalog.resource('Gbigquery_table[title0]').provider
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'tableReference' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(creation_time: 2_809_822_103) }
              it { is_expected.to have_attributes(description: 'test description#0 data') }
              it { is_expected.to have_attributes(friendly_name: 'test friendly_name#0 data') }
              it { is_expected.to have_attributes(id: 'test id#0 data') }
              # TODO(alexstephen): Implement keyvaluepairs test.
              # it 'labels' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(last_modified_time: 2_728_042_666) }
              it { is_expected.to have_attributes(location: 'test location#0 data') }
              it { is_expected.to have_attributes(num_bytes: 314_875_943) }
              it { is_expected.to have_attributes(num_long_term_bytes: 1_368_478_970) }
              it { is_expected.to have_attributes(num_rows: 2_780_205_378) }
              it { is_expected.to have_attributes(type: 'TABLE') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'view' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'timePartitioning' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'streamingBuffer' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'schema' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'encryptionConfiguration' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(expiration_time: 1_531_015_816) }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'externalDataConfiguration' do
              #   # Add test code here
              # end
            end

            context 'Gbigquery_table[title1]' do
              subject do
                catalog.resource('Gbigquery_table[title1]').provider
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'tableReference' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(creation_time: 5_619_644_207) }
              it { is_expected.to have_attributes(description: 'test description#1 data') }
              it { is_expected.to have_attributes(friendly_name: 'test friendly_name#1 data') }
              it { is_expected.to have_attributes(id: 'test id#1 data') }
              # TODO(alexstephen): Implement keyvaluepairs test.
              # it 'labels' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(last_modified_time: 5_456_085_333) }
              it { is_expected.to have_attributes(location: 'test location#1 data') }
              it { is_expected.to have_attributes(num_bytes: 629_751_887) }
              it { is_expected.to have_attributes(num_long_term_bytes: 2_736_957_940) }
              it { is_expected.to have_attributes(num_rows: 5_560_410_757) }
              it { is_expected.to have_attributes(type: 'VIEW') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'view' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'timePartitioning' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'streamingBuffer' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'schema' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'encryptionConfiguration' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(expiration_time: 3_062_031_632) }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'externalDataConfiguration' do
              #   # Add test code here
              # end
            end

            context 'Gbigquery_table[title2]' do
              subject do
                catalog.resource('Gbigquery_table[title2]').provider
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'tableReference' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(creation_time: 8_429_466_311) }
              it { is_expected.to have_attributes(description: 'test description#2 data') }
              it { is_expected.to have_attributes(friendly_name: 'test friendly_name#2 data') }
              it { is_expected.to have_attributes(id: 'test id#2 data') }
              # TODO(alexstephen): Implement keyvaluepairs test.
              # it 'labels' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(last_modified_time: 8_184_128_000) }
              it { is_expected.to have_attributes(location: 'test location#2 data') }
              it { is_expected.to have_attributes(num_bytes: 944_627_830) }
              it { is_expected.to have_attributes(num_long_term_bytes: 4_105_436_911) }
              it { is_expected.to have_attributes(num_rows: 8_340_616_136) }
              it { is_expected.to have_attributes(type: 'EXTERNAL') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'view' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'timePartitioning' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'streamingBuffer' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'schema' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'encryptionConfiguration' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(expiration_time: 4_593_047_448) }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'externalDataConfiguration' do
              #   # Add test code here
              # end
            end
          end

          # Ensure present: resource exists, no change, no name, fail
          context 'title == name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end

        # Ensure present: resource exists, no change, has name
        context 'title != name' do
          # Ensure present: resource exists, no change, has name, pass
          context 'title != name (pass)' do
            before do
              allow(Time).to receive(:now).and_return(
                Time.new(2017, 1, 2, 3, 4, 5)
              )
              expect_network_get_success 1
              expect_network_get_success 2
              expect_network_get_success 3
            end

            let(:catalog) do
              apply_with_error_check(
                <<-MANIFEST
                gbigquery_table { 'title0':
                  ensure                      => present,
                  dataset                     => 'test dataset#0 data',
                  description                 => 'test description#0 data',
                  encryption_configuration    => {
                    kms_key_name => 'test kms_key_name#0 data',
                  },
                  expiration_time             => 1531015816,
                  external_data_configuration => {
                    autodetect            => true,
                    bigtable_options      => {
                      column_families                    => [
                        {
                          columns          => [
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#0 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#0 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#1 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#1 data',
                              type             => 'STRING',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#2 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#2 data',
                              type             => 'INTEGER',
                            },
                          ],
                          encoding         => 'TEXT',
                          family_id        => 'test family_id#0 data',
                          only_read_latest => true,
                          type             => 'BYTES',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#1 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#1 data',
                              type             => 'STRING',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#2 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#2 data',
                              type             => 'INTEGER',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                          ],
                          encoding         => 'BINARY',
                          family_id        => 'test family_id#1 data',
                          only_read_latest => false,
                          type             => 'STRING',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#2 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#2 data',
                              type             => 'INTEGER',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#5 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#5 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#6 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#6 data',
                              type             => 'STRING',
                            },
                          ],
                          encoding         => 'TEXT',
                          family_id        => 'test family_id#2 data',
                          only_read_latest => true,
                          type             => 'INTEGER',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                          ],
                          encoding         => 'BINARY',
                          family_id        => 'test family_id#3 data',
                          only_read_latest => false,
                          type             => 'FLOAT',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#5 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#5 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#6 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#6 data',
                              type             => 'STRING',
                            },
                          ],
                          encoding         => 'TEXT',
                          family_id        => 'test family_id#4 data',
                          only_read_latest => true,
                          type             => 'BOOLEAN',
                        },
                      ],
                      ignore_unspecified_column_families => true,
                      read_rowkey_as_string              => true,
                    },
                    compression           => 'GZIP',
                    csv_options           => {
                      allow_jagged_rows     => true,
                      allow_quoted_newlines => true,
                      encoding              => 'UTF-8',
                      field_delimiter       => 'test field_delimiter#0 data',
                      quote                 => 'test quote#0 data',
                      skip_leading_rows     => 0,
                    },
                    google_sheets_options => {
                      skip_leading_rows => 0,
                    },
                    ignore_unknown_values => true,
                    max_bad_records       => 0,
                    schema                => {
                      fields => [
                        {
                          description => 'test description#0 data',
                          fields      => ['tt', 'uu', 'vv'],
                          mode        => 'NULLABLE',
                          name        => 'test name#0 data',
                          type        => 'STRING',
                        },
                        {
                          description => 'test description#1 data',
                          fields      => ['oo', 'pp', 'qq', 'rr'],
                          mode        => 'REQUIRED',
                          name        => 'test name#1 data',
                          type        => 'BYTES',
                        },
                        {
                          description => 'test description#2 data',
                          fields      => ['kk', 'll'],
                          mode        => 'REPEATED',
                          name        => 'test name#2 data',
                          type        => 'INTEGER',
                        },
                      ],
                    },
                    source_format         => 'CSV',
                    source_uris           => ['bb', 'cc', 'dd'],
                  },
                  friendly_name               => 'test friendly_name#0 data',
                  labels                      => {
                    'test labels#1 data' => 'test labels#1 data',
                    'test labels#2 data' => 6131251034,
                  },
                  schema                      => {
                    fields => [
                      {
                        description => 'test description#0 data',
                        fields      => ['tt', 'uu', 'vv'],
                        mode        => 'NULLABLE',
                        name        => 'test name#0 data',
                        type        => 'STRING',
                      },
                      {
                        description => 'test description#1 data',
                        fields      => ['oo', 'pp', 'qq', 'rr'],
                        mode        => 'REQUIRED',
                        name        => 'test name#1 data',
                        type        => 'BYTES',
                      },
                      {
                        description => 'test description#2 data',
                        fields      => ['kk', 'll'],
                        mode        => 'REPEATED',
                        name        => 'test name#2 data',
                        type        => 'INTEGER',
                      },
                    ],
                  },
                  table_reference             => {
                    dataset_id => 'test dataset_id#0 data',
                    table_id   => 'test table_id#0 data',
                    projectid  => 'test projectid#0 data',
                  },
                  time_partitioning           => {
                    expiration_ms => 2560001735,
                    type          => 'DAY',
                  },
                  view                        => {
                    use_legacy_sql                  => true,
                    user_defined_function_resources => [
                      {
                        inline_code  => 'test inline_code#0 data',
                        resource_uri => 'test resource_uri#0 data',
                      },
                      {
                        inline_code  => 'test inline_code#1 data',
                        resource_uri => 'test resource_uri#1 data',
                      },
                      {
                        inline_code  => 'test inline_code#2 data',
                        resource_uri => 'test resource_uri#2 data',
                      },
                      {
                        inline_code  => 'test inline_code#3 data',
                        resource_uri => 'test resource_uri#3 data',
                      },
                    ],
                  },
                  project                     => 'test project#0 data',
                  credential                  => 'cred0',
                }

                gbigquery_table { 'title1':
                  ensure                      => present,
                  dataset                     => 'test dataset#1 data',
                  description                 => 'test description#1 data',
                  encryption_configuration    => {
                    kms_key_name => 'test kms_key_name#1 data',
                  },
                  expiration_time             => 3062031632,
                  external_data_configuration => {
                    autodetect            => false,
                    bigtable_options      => {
                      column_families                    => [
                        {
                          columns          => [
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#1 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#1 data',
                              type             => 'STRING',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#2 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#2 data',
                              type             => 'INTEGER',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                          ],
                          encoding         => 'BINARY',
                          family_id        => 'test family_id#1 data',
                          only_read_latest => false,
                          type             => 'STRING',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#2 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#2 data',
                              type             => 'INTEGER',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#5 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#5 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#6 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#6 data',
                              type             => 'STRING',
                            },
                          ],
                          encoding         => 'TEXT',
                          family_id        => 'test family_id#2 data',
                          only_read_latest => true,
                          type             => 'INTEGER',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                          ],
                          encoding         => 'BINARY',
                          family_id        => 'test family_id#3 data',
                          only_read_latest => false,
                          type             => 'FLOAT',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#5 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#5 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#6 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#6 data',
                              type             => 'STRING',
                            },
                          ],
                          encoding         => 'TEXT',
                          family_id        => 'test family_id#4 data',
                          only_read_latest => true,
                          type             => 'BOOLEAN',
                        },
                      ],
                      ignore_unspecified_column_families => false,
                      read_rowkey_as_string              => false,
                    },
                    compression           => 'NONE',
                    csv_options           => {
                      allow_jagged_rows     => false,
                      allow_quoted_newlines => false,
                      encoding              => 'ISO-8859-1',
                      field_delimiter       => 'test field_delimiter#1 data',
                      quote                 => 'test quote#1 data',
                      skip_leading_rows     => 0,
                    },
                    google_sheets_options => {
                      skip_leading_rows => 0,
                    },
                    ignore_unknown_values => false,
                    max_bad_records       => 0,
                    schema                => {
                      fields => [
                        {
                          description => 'test description#1 data',
                          fields      => ['oo', 'pp', 'qq', 'rr'],
                          mode        => 'REQUIRED',
                          name        => 'test name#1 data',
                          type        => 'BYTES',
                        },
                        {
                          description => 'test description#2 data',
                          fields      => ['kk', 'll'],
                          mode        => 'REPEATED',
                          name        => 'test name#2 data',
                          type        => 'INTEGER',
                        },
                        {
                          description => 'test description#3 data',
                          fields      => ['ff', 'gg', 'hh'],
                          mode        => 'NULLABLE',
                          name        => 'test name#3 data',
                          type        => 'FLOAT',
                        },
                        {
                          description => 'test description#4 data',
                          fields      => ['ww', 'xx', 'yy', 'zz'],
                          mode        => 'REQUIRED',
                          name        => 'test name#4 data',
                          type        => 'TIMESTAMP',
                        },
                      ],
                    },
                    source_format         => 'GOOGLE_SHEETS',
                    source_uris           => ['ff', 'gg', 'hh', 'ii', 'jj'],
                  },
                  friendly_name               => 'test friendly_name#1 data',
                  labels                      => {
                    'test labels#2 data' => 'test labels#2 data',
                    'test labels#3 data' => 8175001379,
                    'test labels#4 data' => 'test labels#4 data',
                  },
                  schema                      => {
                    fields => [
                      {
                        description => 'test description#1 data',
                        fields      => ['oo', 'pp', 'qq', 'rr'],
                        mode        => 'REQUIRED',
                        name        => 'test name#1 data',
                        type        => 'BYTES',
                      },
                      {
                        description => 'test description#2 data',
                        fields      => ['kk', 'll'],
                        mode        => 'REPEATED',
                        name        => 'test name#2 data',
                        type        => 'INTEGER',
                      },
                      {
                        description => 'test description#3 data',
                        fields      => ['ff', 'gg', 'hh'],
                        mode        => 'NULLABLE',
                        name        => 'test name#3 data',
                        type        => 'FLOAT',
                      },
                      {
                        description => 'test description#4 data',
                        fields      => ['ww', 'xx', 'yy', 'zz'],
                        mode        => 'REQUIRED',
                        name        => 'test name#4 data',
                        type        => 'TIMESTAMP',
                      },
                    ],
                  },
                  table_reference             => {
                    dataset_id => 'test dataset_id#1 data',
                    table_id   => 'test table_id#1 data',
                    projectid  => 'test projectid#1 data',
                  },
                  time_partitioning           => {
                    expiration_ms => 5120003470,
                    type          => 'DAY',
                  },
                  view                        => {
                    use_legacy_sql                  => false,
                    user_defined_function_resources => [
                      {
                        inline_code  => 'test inline_code#1 data',
                        resource_uri => 'test resource_uri#1 data',
                      },
                      {
                        inline_code  => 'test inline_code#2 data',
                        resource_uri => 'test resource_uri#2 data',
                      },
                    ],
                  },
                  project                     => 'test project#1 data',
                  credential                  => 'cred1',
                }

                gbigquery_table { 'title2':
                  ensure                      => present,
                  dataset                     => 'test dataset#2 data',
                  description                 => 'test description#2 data',
                  encryption_configuration    => {
                    kms_key_name => 'test kms_key_name#2 data',
                  },
                  expiration_time             => 4593047448,
                  external_data_configuration => {
                    autodetect            => true,
                    bigtable_options      => {
                      column_families                    => [
                        {
                          columns          => [
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#2 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#2 data',
                              type             => 'INTEGER',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#5 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#5 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#6 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#6 data',
                              type             => 'STRING',
                            },
                          ],
                          encoding         => 'TEXT',
                          family_id        => 'test family_id#2 data',
                          only_read_latest => true,
                          type             => 'INTEGER',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#3 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#3 data',
                              type             => 'FLOAT',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                          ],
                          encoding         => 'BINARY',
                          family_id        => 'test family_id#3 data',
                          only_read_latest => false,
                          type             => 'FLOAT',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#4 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#4 data',
                              type             => 'BOOLEAN',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#5 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#5 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#6 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#6 data',
                              type             => 'STRING',
                            },
                          ],
                          encoding         => 'TEXT',
                          family_id        => 'test family_id#4 data',
                          only_read_latest => true,
                          type             => 'BOOLEAN',
                        },
                        {
                          columns          => [
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#5 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#5 data',
                              type             => 'BYTES',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#6 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#6 data',
                              type             => 'STRING',
                            },
                            {
                              encoding         => 'BINARY',
                              field_name       => 'test field_name#7 data',
                              only_read_latest => false,
                              qualifier_string => 'test qualifier_string#7 data',
                              type             => 'INTEGER',
                            },
                            {
                              encoding         => 'TEXT',
                              field_name       => 'test field_name#8 data',
                              only_read_latest => true,
                              qualifier_string => 'test qualifier_string#8 data',
                              type             => 'FLOAT',
                            },
                          ],
                          encoding         => 'BINARY',
                          family_id        => 'test family_id#5 data',
                          only_read_latest => false,
                          type             => 'BYTES',
                        },
                      ],
                      ignore_unspecified_column_families => true,
                      read_rowkey_as_string              => true,
                    },
                    compression           => 'GZIP',
                    csv_options           => {
                      allow_jagged_rows     => true,
                      allow_quoted_newlines => true,
                      encoding              => 'UTF-8',
                      field_delimiter       => 'test field_delimiter#2 data',
                      quote                 => 'test quote#2 data',
                      skip_leading_rows     => 0,
                    },
                    google_sheets_options => {
                      skip_leading_rows => 0,
                    },
                    ignore_unknown_values => true,
                    max_bad_records       => 0,
                    schema                => {
                      fields => [
                        {
                          description => 'test description#2 data',
                          fields      => ['kk', 'll'],
                          mode        => 'REPEATED',
                          name        => 'test name#2 data',
                          type        => 'INTEGER',
                        },
                        {
                          description => 'test description#3 data',
                          fields      => ['ff', 'gg', 'hh'],
                          mode        => 'NULLABLE',
                          name        => 'test name#3 data',
                          type        => 'FLOAT',
                        },
                      ],
                    },
                    source_format         => 'NEWLINE_DELIMITED_JSON',
                    source_uris           => ['jj', 'kk', 'll'],
                  },
                  friendly_name               => 'test friendly_name#2 data',
                  labels                      => {
                    'test labels#3 data' => 'test labels#3 data',
                    'test labels#4 data' => 10218751724,
                    'test labels#5 data' => 'test labels#5 data',
                    'test labels#6 data' => 14306252413,
                  },
                  schema                      => {
                    fields => [
                      {
                        description => 'test description#2 data',
                        fields      => ['kk', 'll'],
                        mode        => 'REPEATED',
                        name        => 'test name#2 data',
                        type        => 'INTEGER',
                      },
                      {
                        description => 'test description#3 data',
                        fields      => ['ff', 'gg', 'hh'],
                        mode        => 'NULLABLE',
                        name        => 'test name#3 data',
                        type        => 'FLOAT',
                      },
                    ],
                  },
                  table_reference             => {
                    dataset_id => 'test dataset_id#2 data',
                    table_id   => 'test table_id#2 data',
                    projectid  => 'test projectid#2 data',
                  },
                  time_partitioning           => {
                    expiration_ms => 7680005205,
                    type          => 'DAY',
                  },
                  view                        => {
                    use_legacy_sql                  => true,
                    user_defined_function_resources => [
                      {
                        inline_code  => 'test inline_code#2 data',
                        resource_uri => 'test resource_uri#2 data',
                      },
                      {
                        inline_code  => 'test inline_code#3 data',
                        resource_uri => 'test resource_uri#3 data',
                      },
                      {
                        inline_code  => 'test inline_code#4 data',
                        resource_uri => 'test resource_uri#4 data',
                      },
                      {
                        inline_code  => 'test inline_code#5 data',
                        resource_uri => 'test resource_uri#5 data',
                      },
                      {
                        inline_code  => 'test inline_code#6 data',
                        resource_uri => 'test resource_uri#6 data',
                      },
                    ],
                  },
                  project                     => 'test project#2 data',
                  credential                  => 'cred2',
                }
                MANIFEST
              ).catalog
            end

            context 'Gbigquery_table[title0]' do
              subject do
                catalog.resource('Gbigquery_table[title0]').provider
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'tableReference' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(creation_time: 2_809_822_103) }
              it { is_expected.to have_attributes(description: 'test description#0 data') }
              it { is_expected.to have_attributes(friendly_name: 'test friendly_name#0 data') }
              it { is_expected.to have_attributes(id: 'test id#0 data') }
              # TODO(alexstephen): Implement keyvaluepairs test.
              # it 'labels' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(last_modified_time: 2_728_042_666) }
              it { is_expected.to have_attributes(location: 'test location#0 data') }
              it { is_expected.to have_attributes(num_bytes: 314_875_943) }
              it { is_expected.to have_attributes(num_long_term_bytes: 1_368_478_970) }
              it { is_expected.to have_attributes(num_rows: 2_780_205_378) }
              it { is_expected.to have_attributes(type: 'TABLE') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'view' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'timePartitioning' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'streamingBuffer' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'schema' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'encryptionConfiguration' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(expiration_time: 1_531_015_816) }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'externalDataConfiguration' do
              #   # Add test code here
              # end
            end

            context 'Gbigquery_table[title1]' do
              subject do
                catalog.resource('Gbigquery_table[title1]').provider
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'tableReference' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(creation_time: 5_619_644_207) }
              it { is_expected.to have_attributes(description: 'test description#1 data') }
              it { is_expected.to have_attributes(friendly_name: 'test friendly_name#1 data') }
              it { is_expected.to have_attributes(id: 'test id#1 data') }
              # TODO(alexstephen): Implement keyvaluepairs test.
              # it 'labels' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(last_modified_time: 5_456_085_333) }
              it { is_expected.to have_attributes(location: 'test location#1 data') }
              it { is_expected.to have_attributes(num_bytes: 629_751_887) }
              it { is_expected.to have_attributes(num_long_term_bytes: 2_736_957_940) }
              it { is_expected.to have_attributes(num_rows: 5_560_410_757) }
              it { is_expected.to have_attributes(type: 'VIEW') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'view' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'timePartitioning' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'streamingBuffer' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'schema' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'encryptionConfiguration' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(expiration_time: 3_062_031_632) }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'externalDataConfiguration' do
              #   # Add test code here
              # end
            end

            context 'Gbigquery_table[title2]' do
              subject do
                catalog.resource('Gbigquery_table[title2]').provider
              end

              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'tableReference' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(creation_time: 8_429_466_311) }
              it { is_expected.to have_attributes(description: 'test description#2 data') }
              it { is_expected.to have_attributes(friendly_name: 'test friendly_name#2 data') }
              it { is_expected.to have_attributes(id: 'test id#2 data') }
              # TODO(alexstephen): Implement keyvaluepairs test.
              # it 'labels' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(last_modified_time: 8_184_128_000) }
              it { is_expected.to have_attributes(location: 'test location#2 data') }
              it { is_expected.to have_attributes(num_bytes: 944_627_830) }
              it { is_expected.to have_attributes(num_long_term_bytes: 4_105_436_911) }
              it { is_expected.to have_attributes(num_rows: 8_340_616_136) }
              it { is_expected.to have_attributes(type: 'EXTERNAL') }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'view' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'timePartitioning' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'streamingBuffer' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'schema' do
              #   # Add test code here
              # end
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'encryptionConfiguration' do
              #   # Add test code here
              # end
              it { is_expected.to have_attributes(expiration_time: 4_593_047_448) }
              # TODO(nelsonjr): Implement complex nested property object test.
              # it 'externalDataConfiguration' do
              #   # Add test code here
              # end
            end
          end

          # Ensure present: resource exists, no change, has name, fail
          context 'title != name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end
      end

      # Ensure present: resource exists, changes
      context 'changes == action' do
        # Ensure present: resource exists, changes, no name
        context 'title == name' do
          # Ensure present: resource exists, changes, no name, pass
          context 'title == name (pass)' do
            # TODO(nelsonjr): Implement new test format.
          end

          # Ensure present: resource exists, changes, no name, fail
          context 'title == name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end

        # Ensure present: resource exists, changes, has name
        context 'title != name' do
          # Ensure present: resource exists, changes, has name, pass
          context 'title != name (pass)' do
            # TODO(nelsonjr): Implement new test format.
          end

          # Ensure present: resource exists, changes, has name, fail
          context 'title != name (fail)' do
            # TODO(nelsonjr): Implement new test format.
            subject { -> { raise '[placeholder] This should fail.' } }
            it { is_expected.to raise_error(RuntimeError, /placeholder/) }
          end
        end
      end
    end

    context 'resource missing' do
      # Ensure present: resource missing, ignore, no name
      context 'title == name' do
        # Ensure present: resource missing, ignore, no name, pass
        context 'title == name (pass)' do
          before(:each) do
            expect_network_get_failed 1, name: 'title0'
            expect_network_create \
              1,
              'kind' => 'bigquery#table',
              'tableReference' => {
                'datasetId' => 'test dataset_id#0 data',
                'projectid' => 'test projectid#0 data',
                'tableId' => 'test table_id#0 data'
              },
              'description' => 'test description#0 data',
              'friendlyName' => 'test friendly_name#0 data',
              'labels' => {
                'test labels#1 data' => 'test labels#1 data',
                'test labels#2 data' => 6_131_251_034
              },
              'view' => {
                'useLegacySql' => true,
                'userDefinedFunctionResources' => [
                  {
                    'inlineCode' => 'test inline_code#0 data',
                    'resourceUri' => 'test resource_uri#0 data'
                  },
                  {
                    'inlineCode' => 'test inline_code#1 data',
                    'resourceUri' => 'test resource_uri#1 data'
                  },
                  {
                    'inlineCode' => 'test inline_code#2 data',
                    'resourceUri' => 'test resource_uri#2 data'
                  },
                  {
                    'inlineCode' => 'test inline_code#3 data',
                    'resourceUri' => 'test resource_uri#3 data'
                  }
                ]
              },
              'timePartitioning' => {
                'expirationMs' => 2_560_001_735,
                'type' => 'DAY'
              },
              'schema' => {
                'fields' => [
                  {
                    'description' => 'test description#0 data',
                    'fields' => %w[tt uu vv],
                    'mode' => 'NULLABLE',
                    'name' => 'test name#0 data',
                    'type' => 'STRING'
                  },
                  {
                    'description' => 'test description#1 data',
                    'fields' => %w[oo pp qq rr],
                    'mode' => 'REQUIRED',
                    'name' => 'test name#1 data',
                    'type' => 'BYTES'
                  },
                  {
                    'description' => 'test description#2 data',
                    'fields' => %w[kk ll],
                    'mode' => 'REPEATED',
                    'name' => 'test name#2 data',
                    'type' => 'INTEGER'
                  }
                ]
              },
              'encryptionConfiguration' => {
                'kmsKeyName' => 'test kms_key_name#0 data'
              },
              'expirationTime' => 1_531_015_816,
              'externalDataConfiguration' => {
                'autodetect' => true,
                'compression' => 'GZIP',
                'ignoreUnknownValues' => true,
                'maxBadRecords' => 0,
                'sourceFormat' => 'CSV',
                'sourceUris' => %w[bb cc dd],
                'schema' => {
                  'fields' => [
                    {
                      'description' => 'test description#0 data',
                      'fields' => %w[tt uu vv],
                      'mode' => 'NULLABLE',
                      'name' => 'test name#0 data',
                      'type' => 'STRING'
                    },
                    {
                      'description' => 'test description#1 data',
                      'fields' => %w[oo pp qq rr],
                      'mode' => 'REQUIRED',
                      'name' => 'test name#1 data',
                      'type' => 'BYTES'
                    },
                    {
                      'description' => 'test description#2 data',
                      'fields' => %w[kk ll],
                      'mode' => 'REPEATED',
                      'name' => 'test name#2 data',
                      'type' => 'INTEGER'
                    }
                  ]
                },
                'googleSheetsOptions' => {
                  'skipLeadingRows' => 0
                },
                'csvOptions' => {
                  'allowJaggedRows' => true,
                  'allowQuotedNewlines' => true,
                  'encoding' => 'UTF-8',
                  'fieldDelimiter' => 'test field_delimiter#0 data',
                  'quote' => 'test quote#0 data',
                  'skipLeadingRows' => 0
                },
                'bigtableOptions' => {
                  'ignoreUnspecifiedColumnFamilies' => true,
                  'readRowkeyAsString' => true,
                  'columnFamilies' => [
                    {
                      'columns' => [
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#0 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#0 data',
                          'type' => 'BYTES'
                        },
                        {
                          'encoding' => 'BINARY',
                          'fieldName' => 'test field_name#1 data',
                          'onlyReadLatest' => false,
                          'qualifierString' => 'test qualifier_string#1 data',
                          'type' => 'STRING'
                        },
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#2 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#2 data',
                          'type' => 'INTEGER'
                        }
                      ],
                      'encoding' => 'TEXT',
                      'familyId' => 'test family_id#0 data',
                      'onlyReadLatest' => true,
                      'type' => 'BYTES'
                    },
                    {
                      'columns' => [
                        {
                          'encoding' => 'BINARY',
                          'fieldName' => 'test field_name#1 data',
                          'onlyReadLatest' => false,
                          'qualifierString' => 'test qualifier_string#1 data',
                          'type' => 'STRING'
                        },
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#2 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#2 data',
                          'type' => 'INTEGER'
                        },
                        {
                          'encoding' => 'BINARY',
                          'fieldName' => 'test field_name#3 data',
                          'onlyReadLatest' => false,
                          'qualifierString' => 'test qualifier_string#3 data',
                          'type' => 'FLOAT'
                        },
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#4 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#4 data',
                          'type' => 'BOOLEAN'
                        }
                      ],
                      'encoding' => 'BINARY',
                      'familyId' => 'test family_id#1 data',
                      'onlyReadLatest' => false,
                      'type' => 'STRING'
                    },
                    {
                      'columns' => [
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#2 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#2 data',
                          'type' => 'INTEGER'
                        },
                        {
                          'encoding' => 'BINARY',
                          'fieldName' => 'test field_name#3 data',
                          'onlyReadLatest' => false,
                          'qualifierString' => 'test qualifier_string#3 data',
                          'type' => 'FLOAT'
                        },
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#4 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#4 data',
                          'type' => 'BOOLEAN'
                        },
                        {
                          'encoding' => 'BINARY',
                          'fieldName' => 'test field_name#5 data',
                          'onlyReadLatest' => false,
                          'qualifierString' => 'test qualifier_string#5 data',
                          'type' => 'BYTES'
                        },
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#6 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#6 data',
                          'type' => 'STRING'
                        }
                      ],
                      'encoding' => 'TEXT',
                      'familyId' => 'test family_id#2 data',
                      'onlyReadLatest' => true,
                      'type' => 'INTEGER'
                    },
                    {
                      'columns' => [
                        {
                          'encoding' => 'BINARY',
                          'fieldName' => 'test field_name#3 data',
                          'onlyReadLatest' => false,
                          'qualifierString' => 'test qualifier_string#3 data',
                          'type' => 'FLOAT'
                        },
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#4 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#4 data',
                          'type' => 'BOOLEAN'
                        }
                      ],
                      'encoding' => 'BINARY',
                      'familyId' => 'test family_id#3 data',
                      'onlyReadLatest' => false,
                      'type' => 'FLOAT'
                    },
                    {
                      'columns' => [
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#4 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#4 data',
                          'type' => 'BOOLEAN'
                        },
                        {
                          'encoding' => 'BINARY',
                          'fieldName' => 'test field_name#5 data',
                          'onlyReadLatest' => false,
                          'qualifierString' => 'test qualifier_string#5 data',
                          'type' => 'BYTES'
                        },
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#6 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#6 data',
                          'type' => 'STRING'
                        }
                      ],
                      'encoding' => 'TEXT',
                      'familyId' => 'test family_id#4 data',
                      'onlyReadLatest' => true,
                      'type' => 'BOOLEAN'
                    }
                  ]
                }
              }
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gbigquery_table { 'title0':
                ensure                      => present,
                dataset                     => 'test dataset#0 data',
                description                 => 'test description#0 data',
                encryption_configuration    => {
                  kms_key_name => 'test kms_key_name#0 data',
                },
                expiration_time             => 1531015816,
                external_data_configuration => {
                  autodetect            => true,
                  bigtable_options      => {
                    column_families                    => [
                      {
                        columns          => [
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#0 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#0 data',
                            type             => 'BYTES',
                          },
                          {
                            encoding         => 'BINARY',
                            field_name       => 'test field_name#1 data',
                            only_read_latest => false,
                            qualifier_string => 'test qualifier_string#1 data',
                            type             => 'STRING',
                          },
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#2 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#2 data',
                            type             => 'INTEGER',
                          },
                        ],
                        encoding         => 'TEXT',
                        family_id        => 'test family_id#0 data',
                        only_read_latest => true,
                        type             => 'BYTES',
                      },
                      {
                        columns          => [
                          {
                            encoding         => 'BINARY',
                            field_name       => 'test field_name#1 data',
                            only_read_latest => false,
                            qualifier_string => 'test qualifier_string#1 data',
                            type             => 'STRING',
                          },
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#2 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#2 data',
                            type             => 'INTEGER',
                          },
                          {
                            encoding         => 'BINARY',
                            field_name       => 'test field_name#3 data',
                            only_read_latest => false,
                            qualifier_string => 'test qualifier_string#3 data',
                            type             => 'FLOAT',
                          },
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#4 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#4 data',
                            type             => 'BOOLEAN',
                          },
                        ],
                        encoding         => 'BINARY',
                        family_id        => 'test family_id#1 data',
                        only_read_latest => false,
                        type             => 'STRING',
                      },
                      {
                        columns          => [
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#2 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#2 data',
                            type             => 'INTEGER',
                          },
                          {
                            encoding         => 'BINARY',
                            field_name       => 'test field_name#3 data',
                            only_read_latest => false,
                            qualifier_string => 'test qualifier_string#3 data',
                            type             => 'FLOAT',
                          },
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#4 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#4 data',
                            type             => 'BOOLEAN',
                          },
                          {
                            encoding         => 'BINARY',
                            field_name       => 'test field_name#5 data',
                            only_read_latest => false,
                            qualifier_string => 'test qualifier_string#5 data',
                            type             => 'BYTES',
                          },
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#6 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#6 data',
                            type             => 'STRING',
                          },
                        ],
                        encoding         => 'TEXT',
                        family_id        => 'test family_id#2 data',
                        only_read_latest => true,
                        type             => 'INTEGER',
                      },
                      {
                        columns          => [
                          {
                            encoding         => 'BINARY',
                            field_name       => 'test field_name#3 data',
                            only_read_latest => false,
                            qualifier_string => 'test qualifier_string#3 data',
                            type             => 'FLOAT',
                          },
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#4 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#4 data',
                            type             => 'BOOLEAN',
                          },
                        ],
                        encoding         => 'BINARY',
                        family_id        => 'test family_id#3 data',
                        only_read_latest => false,
                        type             => 'FLOAT',
                      },
                      {
                        columns          => [
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#4 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#4 data',
                            type             => 'BOOLEAN',
                          },
                          {
                            encoding         => 'BINARY',
                            field_name       => 'test field_name#5 data',
                            only_read_latest => false,
                            qualifier_string => 'test qualifier_string#5 data',
                            type             => 'BYTES',
                          },
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#6 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#6 data',
                            type             => 'STRING',
                          },
                        ],
                        encoding         => 'TEXT',
                        family_id        => 'test family_id#4 data',
                        only_read_latest => true,
                        type             => 'BOOLEAN',
                      },
                    ],
                    ignore_unspecified_column_families => true,
                    read_rowkey_as_string              => true,
                  },
                  compression           => 'GZIP',
                  csv_options           => {
                    allow_jagged_rows     => true,
                    allow_quoted_newlines => true,
                    encoding              => 'UTF-8',
                    field_delimiter       => 'test field_delimiter#0 data',
                    quote                 => 'test quote#0 data',
                    skip_leading_rows     => 0,
                  },
                  google_sheets_options => {
                    skip_leading_rows => 0,
                  },
                  ignore_unknown_values => true,
                  max_bad_records       => 0,
                  schema                => {
                    fields => [
                      {
                        description => 'test description#0 data',
                        fields      => ['tt', 'uu', 'vv'],
                        mode        => 'NULLABLE',
                        name        => 'test name#0 data',
                        type        => 'STRING',
                      },
                      {
                        description => 'test description#1 data',
                        fields      => ['oo', 'pp', 'qq', 'rr'],
                        mode        => 'REQUIRED',
                        name        => 'test name#1 data',
                        type        => 'BYTES',
                      },
                      {
                        description => 'test description#2 data',
                        fields      => ['kk', 'll'],
                        mode        => 'REPEATED',
                        name        => 'test name#2 data',
                        type        => 'INTEGER',
                      },
                    ],
                  },
                  source_format         => 'CSV',
                  source_uris           => ['bb', 'cc', 'dd'],
                },
                friendly_name               => 'test friendly_name#0 data',
                labels                      => {
                  'test labels#1 data' => 'test labels#1 data',
                  'test labels#2 data' => 6131251034,
                },
                schema                      => {
                  fields => [
                    {
                      description => 'test description#0 data',
                      fields      => ['tt', 'uu', 'vv'],
                      mode        => 'NULLABLE',
                      name        => 'test name#0 data',
                      type        => 'STRING',
                    },
                    {
                      description => 'test description#1 data',
                      fields      => ['oo', 'pp', 'qq', 'rr'],
                      mode        => 'REQUIRED',
                      name        => 'test name#1 data',
                      type        => 'BYTES',
                    },
                    {
                      description => 'test description#2 data',
                      fields      => ['kk', 'll'],
                      mode        => 'REPEATED',
                      name        => 'test name#2 data',
                      type        => 'INTEGER',
                    },
                  ],
                },
                table_reference             => {
                  dataset_id => 'test dataset_id#0 data',
                  table_id   => 'test table_id#0 data',
                  projectid  => 'test projectid#0 data',
                },
                time_partitioning           => {
                  expiration_ms => 2560001735,
                  type          => 'DAY',
                },
                view                        => {
                  use_legacy_sql                  => true,
                  user_defined_function_resources => [
                    {
                      inline_code  => 'test inline_code#0 data',
                      resource_uri => 'test resource_uri#0 data',
                    },
                    {
                      inline_code  => 'test inline_code#1 data',
                      resource_uri => 'test resource_uri#1 data',
                    },
                    {
                      inline_code  => 'test inline_code#2 data',
                      resource_uri => 'test resource_uri#2 data',
                    },
                    {
                      inline_code  => 'test inline_code#3 data',
                      resource_uri => 'test resource_uri#3 data',
                    },
                  ],
                },
                project                     => 'test project#0 data',
                credential                  => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gbigquery_table[title0]').provider.ensure
          end

          it { is_expected.to eq :present }
        end

        # Ensure present: resource missing, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure present: resource missing, ignore, has name
      context 'title != name' do
        # Ensure present: resource missing, ignore, has name, pass
        context 'title != name (pass)' do
          before(:each) do
            expect_network_get_failed 1
            expect_network_create \
              1,
              'kind' => 'bigquery#table',
              'tableReference' => {
                'datasetId' => 'test dataset_id#0 data',
                'projectid' => 'test projectid#0 data',
                'tableId' => 'test table_id#0 data'
              },
              'description' => 'test description#0 data',
              'friendlyName' => 'test friendly_name#0 data',
              'labels' => {
                'test labels#1 data' => 'test labels#1 data',
                'test labels#2 data' => 6_131_251_034
              },
              'view' => {
                'useLegacySql' => true,
                'userDefinedFunctionResources' => [
                  {
                    'inlineCode' => 'test inline_code#0 data',
                    'resourceUri' => 'test resource_uri#0 data'
                  },
                  {
                    'inlineCode' => 'test inline_code#1 data',
                    'resourceUri' => 'test resource_uri#1 data'
                  },
                  {
                    'inlineCode' => 'test inline_code#2 data',
                    'resourceUri' => 'test resource_uri#2 data'
                  },
                  {
                    'inlineCode' => 'test inline_code#3 data',
                    'resourceUri' => 'test resource_uri#3 data'
                  }
                ]
              },
              'timePartitioning' => {
                'expirationMs' => 2_560_001_735,
                'type' => 'DAY'
              },
              'schema' => {
                'fields' => [
                  {
                    'description' => 'test description#0 data',
                    'fields' => %w[tt uu vv],
                    'mode' => 'NULLABLE',
                    'name' => 'test name#0 data',
                    'type' => 'STRING'
                  },
                  {
                    'description' => 'test description#1 data',
                    'fields' => %w[oo pp qq rr],
                    'mode' => 'REQUIRED',
                    'name' => 'test name#1 data',
                    'type' => 'BYTES'
                  },
                  {
                    'description' => 'test description#2 data',
                    'fields' => %w[kk ll],
                    'mode' => 'REPEATED',
                    'name' => 'test name#2 data',
                    'type' => 'INTEGER'
                  }
                ]
              },
              'encryptionConfiguration' => {
                'kmsKeyName' => 'test kms_key_name#0 data'
              },
              'expirationTime' => 1_531_015_816,
              'externalDataConfiguration' => {
                'autodetect' => true,
                'compression' => 'GZIP',
                'ignoreUnknownValues' => true,
                'maxBadRecords' => 0,
                'sourceFormat' => 'CSV',
                'sourceUris' => %w[bb cc dd],
                'schema' => {
                  'fields' => [
                    {
                      'description' => 'test description#0 data',
                      'fields' => %w[tt uu vv],
                      'mode' => 'NULLABLE',
                      'name' => 'test name#0 data',
                      'type' => 'STRING'
                    },
                    {
                      'description' => 'test description#1 data',
                      'fields' => %w[oo pp qq rr],
                      'mode' => 'REQUIRED',
                      'name' => 'test name#1 data',
                      'type' => 'BYTES'
                    },
                    {
                      'description' => 'test description#2 data',
                      'fields' => %w[kk ll],
                      'mode' => 'REPEATED',
                      'name' => 'test name#2 data',
                      'type' => 'INTEGER'
                    }
                  ]
                },
                'googleSheetsOptions' => {
                  'skipLeadingRows' => 0
                },
                'csvOptions' => {
                  'allowJaggedRows' => true,
                  'allowQuotedNewlines' => true,
                  'encoding' => 'UTF-8',
                  'fieldDelimiter' => 'test field_delimiter#0 data',
                  'quote' => 'test quote#0 data',
                  'skipLeadingRows' => 0
                },
                'bigtableOptions' => {
                  'ignoreUnspecifiedColumnFamilies' => true,
                  'readRowkeyAsString' => true,
                  'columnFamilies' => [
                    {
                      'columns' => [
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#0 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#0 data',
                          'type' => 'BYTES'
                        },
                        {
                          'encoding' => 'BINARY',
                          'fieldName' => 'test field_name#1 data',
                          'onlyReadLatest' => false,
                          'qualifierString' => 'test qualifier_string#1 data',
                          'type' => 'STRING'
                        },
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#2 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#2 data',
                          'type' => 'INTEGER'
                        }
                      ],
                      'encoding' => 'TEXT',
                      'familyId' => 'test family_id#0 data',
                      'onlyReadLatest' => true,
                      'type' => 'BYTES'
                    },
                    {
                      'columns' => [
                        {
                          'encoding' => 'BINARY',
                          'fieldName' => 'test field_name#1 data',
                          'onlyReadLatest' => false,
                          'qualifierString' => 'test qualifier_string#1 data',
                          'type' => 'STRING'
                        },
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#2 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#2 data',
                          'type' => 'INTEGER'
                        },
                        {
                          'encoding' => 'BINARY',
                          'fieldName' => 'test field_name#3 data',
                          'onlyReadLatest' => false,
                          'qualifierString' => 'test qualifier_string#3 data',
                          'type' => 'FLOAT'
                        },
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#4 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#4 data',
                          'type' => 'BOOLEAN'
                        }
                      ],
                      'encoding' => 'BINARY',
                      'familyId' => 'test family_id#1 data',
                      'onlyReadLatest' => false,
                      'type' => 'STRING'
                    },
                    {
                      'columns' => [
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#2 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#2 data',
                          'type' => 'INTEGER'
                        },
                        {
                          'encoding' => 'BINARY',
                          'fieldName' => 'test field_name#3 data',
                          'onlyReadLatest' => false,
                          'qualifierString' => 'test qualifier_string#3 data',
                          'type' => 'FLOAT'
                        },
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#4 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#4 data',
                          'type' => 'BOOLEAN'
                        },
                        {
                          'encoding' => 'BINARY',
                          'fieldName' => 'test field_name#5 data',
                          'onlyReadLatest' => false,
                          'qualifierString' => 'test qualifier_string#5 data',
                          'type' => 'BYTES'
                        },
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#6 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#6 data',
                          'type' => 'STRING'
                        }
                      ],
                      'encoding' => 'TEXT',
                      'familyId' => 'test family_id#2 data',
                      'onlyReadLatest' => true,
                      'type' => 'INTEGER'
                    },
                    {
                      'columns' => [
                        {
                          'encoding' => 'BINARY',
                          'fieldName' => 'test field_name#3 data',
                          'onlyReadLatest' => false,
                          'qualifierString' => 'test qualifier_string#3 data',
                          'type' => 'FLOAT'
                        },
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#4 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#4 data',
                          'type' => 'BOOLEAN'
                        }
                      ],
                      'encoding' => 'BINARY',
                      'familyId' => 'test family_id#3 data',
                      'onlyReadLatest' => false,
                      'type' => 'FLOAT'
                    },
                    {
                      'columns' => [
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#4 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#4 data',
                          'type' => 'BOOLEAN'
                        },
                        {
                          'encoding' => 'BINARY',
                          'fieldName' => 'test field_name#5 data',
                          'onlyReadLatest' => false,
                          'qualifierString' => 'test qualifier_string#5 data',
                          'type' => 'BYTES'
                        },
                        {
                          'encoding' => 'TEXT',
                          'fieldName' => 'test field_name#6 data',
                          'onlyReadLatest' => true,
                          'qualifierString' => 'test qualifier_string#6 data',
                          'type' => 'STRING'
                        }
                      ],
                      'encoding' => 'TEXT',
                      'familyId' => 'test family_id#4 data',
                      'onlyReadLatest' => true,
                      'type' => 'BOOLEAN'
                    }
                  ]
                }
              }
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gbigquery_table { 'title0':
                ensure                      => present,
                dataset                     => 'test dataset#0 data',
                description                 => 'test description#0 data',
                encryption_configuration    => {
                  kms_key_name => 'test kms_key_name#0 data',
                },
                expiration_time             => 1531015816,
                external_data_configuration => {
                  autodetect            => true,
                  bigtable_options      => {
                    column_families                    => [
                      {
                        columns          => [
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#0 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#0 data',
                            type             => 'BYTES',
                          },
                          {
                            encoding         => 'BINARY',
                            field_name       => 'test field_name#1 data',
                            only_read_latest => false,
                            qualifier_string => 'test qualifier_string#1 data',
                            type             => 'STRING',
                          },
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#2 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#2 data',
                            type             => 'INTEGER',
                          },
                        ],
                        encoding         => 'TEXT',
                        family_id        => 'test family_id#0 data',
                        only_read_latest => true,
                        type             => 'BYTES',
                      },
                      {
                        columns          => [
                          {
                            encoding         => 'BINARY',
                            field_name       => 'test field_name#1 data',
                            only_read_latest => false,
                            qualifier_string => 'test qualifier_string#1 data',
                            type             => 'STRING',
                          },
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#2 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#2 data',
                            type             => 'INTEGER',
                          },
                          {
                            encoding         => 'BINARY',
                            field_name       => 'test field_name#3 data',
                            only_read_latest => false,
                            qualifier_string => 'test qualifier_string#3 data',
                            type             => 'FLOAT',
                          },
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#4 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#4 data',
                            type             => 'BOOLEAN',
                          },
                        ],
                        encoding         => 'BINARY',
                        family_id        => 'test family_id#1 data',
                        only_read_latest => false,
                        type             => 'STRING',
                      },
                      {
                        columns          => [
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#2 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#2 data',
                            type             => 'INTEGER',
                          },
                          {
                            encoding         => 'BINARY',
                            field_name       => 'test field_name#3 data',
                            only_read_latest => false,
                            qualifier_string => 'test qualifier_string#3 data',
                            type             => 'FLOAT',
                          },
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#4 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#4 data',
                            type             => 'BOOLEAN',
                          },
                          {
                            encoding         => 'BINARY',
                            field_name       => 'test field_name#5 data',
                            only_read_latest => false,
                            qualifier_string => 'test qualifier_string#5 data',
                            type             => 'BYTES',
                          },
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#6 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#6 data',
                            type             => 'STRING',
                          },
                        ],
                        encoding         => 'TEXT',
                        family_id        => 'test family_id#2 data',
                        only_read_latest => true,
                        type             => 'INTEGER',
                      },
                      {
                        columns          => [
                          {
                            encoding         => 'BINARY',
                            field_name       => 'test field_name#3 data',
                            only_read_latest => false,
                            qualifier_string => 'test qualifier_string#3 data',
                            type             => 'FLOAT',
                          },
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#4 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#4 data',
                            type             => 'BOOLEAN',
                          },
                        ],
                        encoding         => 'BINARY',
                        family_id        => 'test family_id#3 data',
                        only_read_latest => false,
                        type             => 'FLOAT',
                      },
                      {
                        columns          => [
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#4 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#4 data',
                            type             => 'BOOLEAN',
                          },
                          {
                            encoding         => 'BINARY',
                            field_name       => 'test field_name#5 data',
                            only_read_latest => false,
                            qualifier_string => 'test qualifier_string#5 data',
                            type             => 'BYTES',
                          },
                          {
                            encoding         => 'TEXT',
                            field_name       => 'test field_name#6 data',
                            only_read_latest => true,
                            qualifier_string => 'test qualifier_string#6 data',
                            type             => 'STRING',
                          },
                        ],
                        encoding         => 'TEXT',
                        family_id        => 'test family_id#4 data',
                        only_read_latest => true,
                        type             => 'BOOLEAN',
                      },
                    ],
                    ignore_unspecified_column_families => true,
                    read_rowkey_as_string              => true,
                  },
                  compression           => 'GZIP',
                  csv_options           => {
                    allow_jagged_rows     => true,
                    allow_quoted_newlines => true,
                    encoding              => 'UTF-8',
                    field_delimiter       => 'test field_delimiter#0 data',
                    quote                 => 'test quote#0 data',
                    skip_leading_rows     => 0,
                  },
                  google_sheets_options => {
                    skip_leading_rows => 0,
                  },
                  ignore_unknown_values => true,
                  max_bad_records       => 0,
                  schema                => {
                    fields => [
                      {
                        description => 'test description#0 data',
                        fields      => ['tt', 'uu', 'vv'],
                        mode        => 'NULLABLE',
                        name        => 'test name#0 data',
                        type        => 'STRING',
                      },
                      {
                        description => 'test description#1 data',
                        fields      => ['oo', 'pp', 'qq', 'rr'],
                        mode        => 'REQUIRED',
                        name        => 'test name#1 data',
                        type        => 'BYTES',
                      },
                      {
                        description => 'test description#2 data',
                        fields      => ['kk', 'll'],
                        mode        => 'REPEATED',
                        name        => 'test name#2 data',
                        type        => 'INTEGER',
                      },
                    ],
                  },
                  source_format         => 'CSV',
                  source_uris           => ['bb', 'cc', 'dd'],
                },
                friendly_name               => 'test friendly_name#0 data',
                labels                      => {
                  'test labels#1 data' => 'test labels#1 data',
                  'test labels#2 data' => 6131251034,
                },
                schema                      => {
                  fields => [
                    {
                      description => 'test description#0 data',
                      fields      => ['tt', 'uu', 'vv'],
                      mode        => 'NULLABLE',
                      name        => 'test name#0 data',
                      type        => 'STRING',
                    },
                    {
                      description => 'test description#1 data',
                      fields      => ['oo', 'pp', 'qq', 'rr'],
                      mode        => 'REQUIRED',
                      name        => 'test name#1 data',
                      type        => 'BYTES',
                    },
                    {
                      description => 'test description#2 data',
                      fields      => ['kk', 'll'],
                      mode        => 'REPEATED',
                      name        => 'test name#2 data',
                      type        => 'INTEGER',
                    },
                  ],
                },
                table_reference             => {
                  dataset_id => 'test dataset_id#0 data',
                  table_id   => 'test table_id#0 data',
                  projectid  => 'test projectid#0 data',
                },
                time_partitioning           => {
                  expiration_ms => 2560001735,
                  type          => 'DAY',
                },
                view                        => {
                  use_legacy_sql                  => true,
                  user_defined_function_resources => [
                    {
                      inline_code  => 'test inline_code#0 data',
                      resource_uri => 'test resource_uri#0 data',
                    },
                    {
                      inline_code  => 'test inline_code#1 data',
                      resource_uri => 'test resource_uri#1 data',
                    },
                    {
                      inline_code  => 'test inline_code#2 data',
                      resource_uri => 'test resource_uri#2 data',
                    },
                    {
                      inline_code  => 'test inline_code#3 data',
                      resource_uri => 'test resource_uri#3 data',
                    },
                  ],
                },
                project                     => 'test project#0 data',
                credential                  => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gbigquery_table[title0]').provider.ensure
          end

          it { is_expected.to eq :present }
        end

        # Ensure present: resource missing, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end
  end

  context 'ensure == absent' do
    context 'resource missing' do
      # Ensure absent: resource missing, ignore, no name
      context 'title == name' do
        # Ensure absent: resource missing, ignore, no name, pass
        context 'title == name (pass)' do
          before(:each) do
            expect_network_get_failed 1, name: 'title0'
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gbigquery_table { 'title0':
                ensure     => absent,
                project    => 'test project#0 data',
                credential => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gbigquery_table[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource missing, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure absent: resource missing, ignore, has name
      context 'title != name' do
        # Ensure absent: resource missing, ignore, has name, pass
        context 'title != name (pass)' do
          before(:each) do
            expect_network_get_failed 1
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gbigquery_table { 'title0':
                ensure     => absent,
                project    => 'test project#0 data',
                credential => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gbigquery_table[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource missing, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end

    context 'resource exists' do
      # Ensure absent: resource exists, ignore, no name
      context 'title == name' do
        # Ensure absent: resource exists, ignore, no name, pass
        context 'title == name (pass)' do
          before(:each) do
            expect_network_get_success 1, name: 'title0'
            expect_network_delete 1, 'title0'
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gbigquery_table { 'title0':
                ensure     => absent,
                project    => 'test project#0 data',
                credential => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gbigquery_table[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource exists, ignore, no name, fail
        context 'title == name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end

      # Ensure absent: resource exists, ignore, has name
      context 'title != name' do
        # Ensure absent: resource exists, ignore, has name, pass
        context 'title != name (pass)' do
          before(:each) do
            expect_network_get_success 1
            expect_network_delete 1
          end

          subject do
            apply_with_error_check(
              <<-MANIFEST
              gbigquery_table { 'title0':
                ensure     => absent,
                project    => 'test project#0 data',
                credential => 'cred0',
              }
              MANIFEST
            ).catalog.resource('Gbigquery_table[title0]')
              .provider.ensure
          end

          it { is_expected.to eq :absent }
        end

        # Ensure absent: resource exists, ignore, has name, fail
        context 'title != name (fail)' do
          # TODO(nelsonjr): Implement new test format.
          subject { -> { raise '[placeholder] This should fail.' } }
          it { is_expected.to raise_error(RuntimeError, /placeholder/) }
        end
      end
    end
  end

  context '#flush' do
    subject do
      Puppet::Type.type(:gbigquery_table).new(
        ensure: :present,
        name: 'my-name'
      ).provider
    end
    context 'no-op' do
      it { subject.flush }
    end
    context 'modified object' do
      before do
        subject.dirty :some_property, 'current', 'newvalue'
      end
      context 'no-op if created' do
        before { subject.instance_variable_set(:@created, true) }
        it { expect { subject.flush }.not_to raise_error }
      end
      context 'no-op if deleted' do
        before { subject.instance_variable_set(:@deleted, true) }
        it { expect { subject.flush }.not_to raise_error }
      end
    end
  end

  private

  def expect_network_get_success(id, data = {})
    id_data = data.fetch(:name, '').include?('title') ? 'title' : 'name'
    body = load_network_result("success#{id}~#{id_data}.yaml").to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! GET #{self_link(uri_data(id).merge(data))}"
    expect(Google::Bigquery::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET #{args}"
      request
    end
  end

  def http_success(body)
    response = Net::HTTPOK.new(1.0, 200, 'OK')
    response.body = body
    response.instance_variable_set(:@read, true)
    response
  end

  def expect_network_get_failed(id, data = {})
    request = double('request')
    allow(request).to receive(:send).and_return(http_failed_object_missing)

    debug_network "!! #{self_link(uri_data(id).merge(data))}"
    expect(Google::Bigquery::Network::Get).to receive(:new)
      .with(self_link(uri_data(id).merge(data)),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> GET [failed] #{args}"
      request
    end
  end

  def http_failed_object_missing
    Net::HTTPNotFound.new(1.0, 404, 'Not Found')
  end

  def expect_network_create(id, expected_body, data = {})
    merged_uri = uri_data(id).merge(data)
    body = { kind: 'bigquery#table' }.to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! POST #{collection(merged_uri)}"
    expect(Google::Bigquery::Network::Post).to receive(:new)
      .with(collection(merged_uri), instance_of(Google::FakeAuthorization),
            'application/json', expected_body.to_json) do |args|
      debug_network ">> POST #{args} = body(#{body})"
      request
    end
  end

  def expect_network_delete(id, name = nil, data = {})
    delete_data = uri_data(id).merge(data)
    delete_data[:name] = name unless name.nil?
    body = { kind: 'bigquery#table' }.to_json

    request = double('request')
    allow(request).to receive(:send).and_return(http_success(body))

    debug_network "!! DELETE #{self_link(delete_data)}"
    expect(Google::Bigquery::Network::Delete).to receive(:new)
      .with(self_link(delete_data),
            instance_of(Google::FakeAuthorization)) do |args|
      debug_network ">> DELETE #{args}"
      request
    end
  end

  def load_network_result(file)
    results = File.join(File.dirname(__FILE__), 'data', 'network',
                        'gbigquery_table', file)
    debug("Loading result file: #{results}")
    raise "Network result data file #{results}" unless File.exist?(results)
    data = YAML.safe_load(File.read(results))
    raise "Invalid network results #{results}" unless data.class <= Hash
    data
  end

  def debug(message)
    puts(message) if ENV['RSPEC_DEBUG']
  end

  def debug_network(message)
    puts("Network #{message}") \
      if ENV['RSPEC_DEBUG'] || ENV['RSPEC_HTTP_VERBOSE']
  end

  def create_type(id)
    Puppet::Type.type(:gbigquery_table).new(
      ensure: :present,
      title: "title#{id - 1}",
      credential: "cred#{id - 1}",
      project: GoogleTests::Constants::T_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::T_PROJECT_DATA.size],
      dataset: GoogleTests::Constants::T_DATASET_DATA[(id - 1) \
        % GoogleTests::Constants::T_DATASET_DATA.size],
      name: GoogleTests::Constants::T_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::T_NAME_DATA.size]
    )
  end

  def expand_variables(template, data, extra_data = {})
    Puppet::Type.type(:gbigquery_table).provider(:google)
                .expand_variables(template, data, extra_data)
  end

  def collection(data)
    URI.join(
      'https://www.googleapis.com/bigquery/v2/',
      expand_variables(
        'projects/{{project}}/datasets/{{dataset}}/tables',
        data
      )
    )
  end

  def self_link(data)
    URI.join(
      'https://www.googleapis.com/bigquery/v2/',
      expand_variables(
        'projects/{{project}}/datasets/{{dataset}}/tables/{{name}}',
        data
      )
    )
  end

  # Creates variable test data to comply with self_link URI parameters
  def uri_data(id)
    {
      project: GoogleTests::Constants::T_PROJECT_DATA[(id - 1) \
        % GoogleTests::Constants::T_PROJECT_DATA.size],
      dataset: GoogleTests::Constants::T_DATASET_DATA[(id - 1) \
        % GoogleTests::Constants::T_DATASET_DATA.size],
      name: GoogleTests::Constants::T_NAME_DATA[(id - 1) \
        % GoogleTests::Constants::T_NAME_DATA.size]
    }
  end
end
