# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'google/bigquery/property/array'
require 'google/bigquery/property/base'

module Google
  module Bigquery
    module Data
      # A class to manage data for Columns for table.
      class TableColumns
        include Comparable

        attr_reader :encoding
        attr_reader :field_name
        attr_reader :only_read_latest
        attr_reader :qualifier_string
        attr_reader :type

        def to_json(_arg = nil)
          {
            'encoding' => encoding,
            'fieldName' => field_name,
            'onlyReadLatest' => only_read_latest,
            'qualifierString' => qualifier_string,
            'type' => type
          }.reject { |_k, v| v.nil? }.to_json
        end

        def to_s
          {
            encoding: encoding,
            field_name: field_name,
            only_read_latest: only_read_latest,
            qualifier_string: qualifier_string,
            type: type
          }.reject { |_k, v| v.nil? }.map { |k, v| "#{k}: #{v}" }.join(', ')
        end

        def ==(other)
          return false unless other.is_a? TableColumns
          compare_fields(other).each do |compare|
            next if compare[:self].nil? || compare[:other].nil?
            return false if compare[:self] != compare[:other]
          end
          true
        end

        def <=>(other)
          return false unless other.is_a? TableColumns
          compare_fields(other).each do |compare|
            next if compare[:self].nil? || compare[:other].nil?
            result = compare[:self] <=> compare[:other]
            return result unless result.zero?
          end
          0
        end

        private

        def compare_fields(other)
          [
            { self: encoding, other: other.encoding },
            { self: field_name, other: other.field_name },
            { self: only_read_latest, other: other.only_read_latest },
            { self: qualifier_string, other: other.qualifier_string },
            { self: type, other: other.type }
          ]
        end
      end

      # Manages a TableColumns nested object
      # Data is coming from the GCP API
      class TableColumnsApi < TableColumns
        def initialize(args)
          @encoding = Google::Bigquery::Property::Enum.api_munge(args['encoding'])
          @field_name = Google::Bigquery::Property::String.api_munge(args['fieldName'])
          @only_read_latest = Google::Bigquery::Property::Boolean.api_munge(args['onlyReadLatest'])
          @qualifier_string = Google::Bigquery::Property::String.api_munge(args['qualifierString'])
          @type = Google::Bigquery::Property::Enum.api_munge(args['type'])
        end
      end

      # Manages a TableColumns nested object
      # Data is coming from the Puppet manifest
      class TableColumnsCatalog < TableColumns
        def initialize(args)
          @encoding = Google::Bigquery::Property::Enum.unsafe_munge(args['encoding'])
          @field_name = Google::Bigquery::Property::String.unsafe_munge(args['field_name'])
          @only_read_latest =
            Google::Bigquery::Property::Boolean.unsafe_munge(args['only_read_latest'])
          @qualifier_string =
            Google::Bigquery::Property::String.unsafe_munge(args['qualifier_string'])
          @type = Google::Bigquery::Property::Enum.unsafe_munge(args['type'])
        end
      end
    end

    module Property
      # A class to manage input to Columns for table.
      class TableColumns < Google::Bigquery::Property::Base
        # Used for parsing Puppet catalog
        def unsafe_munge(value)
          self.class.unsafe_munge(value)
        end

        # Used for parsing Puppet catalog
        def self.unsafe_munge(value)
          return if value.nil?
          Data::TableColumnsCatalog.new(value)
        end

        # Used for parsing GCP API responses
        def self.api_munge(value)
          return if value.nil?
          Data::TableColumnsApi.new(value)
        end
      end

      # A Puppet property that holds an integer
      class TableColumnsArray < Google::Bigquery::Property::Array
        # Used for parsing Puppet catalog
        def unsafe_munge(value)
          self.class.unsafe_munge(value)
        end

        # Used for parsing Puppet catalog
        def self.unsafe_munge(value)
          return if value.nil?
          return TableColumns.unsafe_munge(value) \
            unless value.is_a?(::Array)
          value.map { |v| TableColumns.unsafe_munge(v) }
        end

        # Used for parsing GCP API responses
        def self.api_munge(value)
          return if value.nil?
          return TableColumns.api_munge(value) \
            unless value.is_a?(::Array)
          value.map { |v| TableColumns.api_munge(v) }
        end
      end
    end
  end
end
